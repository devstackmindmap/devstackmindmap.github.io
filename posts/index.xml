<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on DEV STACK MINDMAP</title>
    <link>http://example.org/posts/</link>
    <description>Recent content in Posts on DEV STACK MINDMAP</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 21 May 2021 11:16:00 +0900</lastBuildDate><atom:link href="http://example.org/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>GameLift Primer Script</title>
      <link>http://example.org/posts/20210521-gamelift-primer-script/</link>
      <pubDate>Fri, 21 May 2021 11:16:00 +0900</pubDate>
      
      <guid>http://example.org/posts/20210521-gamelift-primer-script/</guid>
      <description>Amazon GameLift Primer
게임 호스팅 요구 사항
Amazon GameLift의 주요 이점
GameLift 이해
게임 서비스 로직
인프라 관리 시스템
세션 관리 시스템
게임 세션 배치 시스템
매치메이킹 시스템
GameLift 개발 개요
게임 데이터
게임 재무
Amazon GameLift Primer Amazon GameLift Primer를 시작하겠습니다. Amazon에서 기술 교육 과정 개발자로 일하고 있으며 이 과정의 진행을 맡은 Tom Stern입니다.
이 과정에서는 Amazon GameLift, 이 서비스 주요 기능과 게임에서 서비스를 사용하는 다양한 방법에 대해 알아봅니다.</description>
    </item>
    
    <item>
      <title>GameLift, Unity로 세션 생성, 입장, 가위바위보 게임 만들기</title>
      <link>http://example.org/posts/20210521-gamelift-session/</link>
      <pubDate>Fri, 21 May 2021 11:16:00 +0900</pubDate>
      
      <guid>http://example.org/posts/20210521-gamelift-session/</guid>
      <description>Overview 목표 장점 제약사항 Architecture Step 1. 설치  Step 1.1. Unity Hub 설치 Step 1.2. AWS Toolkit for Visual Studio 설치   Step 2. 프로젝트 가져오기  Step 2.1. Server Step 2.2. Client   Step 3. 네트워크 생성  Step 3.1. VPC 생성 Step 3.2. Subnet 생성 Step 3.3. 인터넷 게이트웨이 생성 및 연결 Step 3.4. NAT 게이트웨이 생성 Step 3.5. 라우팅 테이블 생성 및 설정   Step 4.</description>
    </item>
    
    <item>
      <title>Docker 해보기</title>
      <link>http://example.org/posts/20210506-do-docker/</link>
      <pubDate>Thu, 06 May 2021 13:34:00 +0900</pubDate>
      
      <guid>http://example.org/posts/20210506-do-docker/</guid>
      <description>https://docs.docker.com/get-started/ 에서 Windows 버전 도커 설치 파일 다운로드 후 실행  Docker Desktop requires the Server service to be enabled. 메시지로 실행 실패 Hyper-V 옵션 켜기 윈도우 시작버튼 -&amp;gt; 서비스 Server 의 속성으로 가서 시작 유형을 &amp;ldquo;자동&amp;quot;으로 수정 후 설치 파일 다시 실행 WSL2 설치, 활성화     docker run -d -p 80:80 docker/getting-started  Install Docker Desktop       Links ▶ docker docs</description>
    </item>
    
    <item>
      <title>AWS Container Service</title>
      <link>http://example.org/posts/20210504-aws-containers/</link>
      <pubDate>Tue, 04 May 2021 15:13:00 +0900</pubDate>
      
      <guid>http://example.org/posts/20210504-aws-containers/</guid>
      <description>Overview AWS에는 Container 관련 서비스들의 몇 가지 있다.
ECS, EKS, Fargate, ECR이 있다. 어떤 서비스 인지, 언제 쓰는지 정리해보자.
 Container 운영체제 수준에서 가상화를 실시하여 다수의 컨테이너를 OS 커널에서 직접 구동합니다. 가상머신은 머신 수준의 분리를 위해 하드웨어 가상화가 필요한 반면 컨테이너는 동일한 운영체제 내의 독립 된 공간에서 실행됩니다. 독립된 공간의 수가 증가할 수록 오버헤드의 차이가 더 명확해집니다. 일반적인 노트북으로 수십개의 컨테이너를 실행시킬 수 있지만 단 하나의 가상머신도 버거울 수 있습니다.</description>
    </item>
    
    <item>
      <title>Redis Cluster 샤드 추가/삭제에 따른 데이터 재 조정 확인</title>
      <link>http://example.org/posts/20210502-redis-cluster-shard/</link>
      <pubDate>Sun, 02 May 2021 02:09:00 +0900</pubDate>
      
      <guid>http://example.org/posts/20210502-redis-cluster-shard/</guid>
      <description>Overview 목표 Step 1. 네트워크 구성  Step 1.1. VPC 생성 Step 1.2. 서브넷 생성 Step 1.3. 보안 그룹 생성 Step 1.4. 인터넷 게이트웨이 생성 Step 1.5. 인터넷 게이트웨이 VPC에 연결 Step 1.6. 라우팅 테이블 생성 Step 1.7. 라우팅 편집 Step 1.8. 서브넷 연결   Step 2. Redis Cluster 생성  Step 2.1. 서브넷 그룹 생성 Step 2.2. Redis Cluster 생성   Step 3. AWS Cloud9 생성 Step 4.</description>
    </item>
    
    <item>
      <title>Data Lake</title>
      <link>http://example.org/posts/20210429-data-lake/</link>
      <pubDate>Thu, 29 Apr 2021 11:00:00 +0900</pubDate>
      
      <guid>http://example.org/posts/20210429-data-lake/</guid>
      <description>Data Lake 란 가공되지 않은 다양한 종류의 데이터를 한 곳에 모아둔 저장소의 집합이다.
 Data Warehouse(DW) 란 사용자의 의사 결정에 도움을 주기 위하여 기간시스템의 데이터베이스에 축적된 데이터를 공통의 형식으로 변환해서 관리하는 데이터베이스를 말한다. 줄여서 DW로도 불린다.
 Data Lake vs DW 비정형 vs 정형
 ETL 이란 추출(Extract), 변환(Transform), 로드(Load)
 ELK 란 ELK( ELK Stack )는 Elastic사 에서 제공하는 Elasticsearch, Logstash, Kibana의 세 가지 오픈 소스 프로젝트의 약자입니다.</description>
    </item>
    
    <item>
      <title>About RDS</title>
      <link>http://example.org/posts/20210428-rds-performance/</link>
      <pubDate>Wed, 28 Apr 2021 13:47:00 +0900</pubDate>
      
      <guid>http://example.org/posts/20210428-rds-performance/</guid>
      <description>RDS 생성 시 Storage 용량 지정 Allocated Storage와 Maximum storage threshold 값 지정
Maximum storage threshold 값은 최대 값.
만약 Allocated Storage 값을 넘어서면 자동으로 storage가 확장되며
자동으로 확장된다면 비용이 지불된다.
Storage type Provisioned IOPS는 IOPS를 특정 범위 (1,000 ~ 80,000 IOPS) 내에서 지정할 수 있지만
Storage type General Purpose는 1GiB당 3 IOPS 이다.
만약 Storage 1 Tib 에 20,000 IOPS를 원한다면 Genral Purpose Storage type 이 아니라 Provisioned IOPS를 선택해야 한다.</description>
    </item>
    
    <item>
      <title>AWS EC2 문제들</title>
      <link>http://example.org/posts/20210423-ec2-issues/</link>
      <pubDate>Fri, 23 Apr 2021 14:08:00 +0900</pubDate>
      
      <guid>http://example.org/posts/20210423-ec2-issues/</guid>
      <description>Credit 및 Burster 내용 이해 및 숙지 T Type Instance에 대해 알아보자.
문서에서 확인해보면 성능 순간 확장 가능 인스턴스 라고 한다.
기본 수준의 CPU 성능과 함께 워크로드에서 필요한 만큼 성능을 높이는 버스트 기능을 제공하도록 설계되어 있다. 여기서 기본 수준이 어느 정도이고 필요한 만큼 성능을 높이는 버스트 기능이 어떻게 작동하는지 이해해야 하겠다.
시간 당 요금이 비슷한 인스턴스들을 가지고 조금 비교해 보자. (서울 기준)
    인스턴스 이름 온디맨드 시간당 요금 vCPU 메모리 스토리지 네트워크 성능     t3.</description>
    </item>
    
    <item>
      <title>GameLift Peering</title>
      <link>http://example.org/posts/20210423-gamelift-peering/</link>
      <pubDate>Fri, 23 Apr 2021 14:08:00 +0900</pubDate>
      
      <guid>http://example.org/posts/20210423-gamelift-peering/</guid>
      <description>EC2에서 원격 GameLift로 CreateGameSession
Local에서 원격 GameLift로 CreateGameSession
둘다 되는데
Lambda에서 원격 GameLift로 CreateGameSession 이 안됨.
 CloudTrail에서 로그를 보면 CreateGameSession 호출 자체를 못함 CloudWatch에서 로그를 확인하면 호출 직전 로그 찍힘 해당 람다는 VPC 내에 있음 람다가 가지고 있는 Role   CustomLambdaRole : GameLiftFullAccess, AmazonRDSDataFullAccess, AWSLambdaBasicExecutionRole, AWSLambdaVPCAccessExecutionRole   권한 문제는 없고 네트워크 문제였음. 람다는 GameLift로 바로 통신되지 않음
  람다가 VPC 외부에 있다면 바로 됨.
VPC 내부에 있다면 Internet Gateway를 탈 수 없기 때문에 NAT를 통해 통신 해야함</description>
    </item>
    
    <item>
      <title>AWS Elastic Beanstalk</title>
      <link>http://example.org/posts/20210420-beanstalk/</link>
      <pubDate>Tue, 20 Apr 2021 11:08:00 +0900</pubDate>
      
      <guid>http://example.org/posts/20210420-beanstalk/</guid>
      <description>AWS Elastic Beanstalk 란?  Elastic Beanstalk를 사용하면 애플리케이션을 실행하는 인프라에 대해 자세히 알지 못해도 AWS 클라우드에서 애플리케이션을 신속하게 배포하고 관리할 수 있습니다. Elastic Beanstalk를 사용하면 선택 또는 제어에 대한 제한 없이 관리 복잡성을 줄일 수 있습니다. 애플리케이션을 업로드하기만 하면 Elastic Beanstalk에서 용량 프로비저닝, 로드 밸런싱, 조정, 애플리케이션 상태 모니터링에 대한 세부 정보를 자동으로 처리합니다. Elastic Beanstalk는 Go, Java, .NET, Node.js, PHP, Python 및 Ruby에서 개발된 애플리케이션을 지원합니다.   Links ▶ AWS Elastic Beanstalk Documentation</description>
    </item>
    
    <item>
      <title>DDoS 방어를 위한 AWS 서비스</title>
      <link>http://example.org/posts/20210419-ddos/</link>
      <pubDate>Mon, 19 Apr 2021 09:55:00 +0900</pubDate>
      
      <guid>http://example.org/posts/20210419-ddos/</guid>
      <description>DDoS 는 비 정상적인 네트워크 트래픽을 공격 대상에 과다하게 발생 시켜 공격 대상의 자원을 소비시킵니다. 크게 인프라 레벨 자원 대상 공격과 애플리케이션 레벨의 자원 대상 공격으로 구분할 수 있습니다.
DDos 방어를 위해 제공되는 AWS 서비스는 AWS Shield, AWS WAF가 있습니다.
AWS Shield AWS Shield는 AWS의 DDoS 공격을 방어하기 위해 개발된 서비스입니다.
AWS Shield Standard, AWS Shield Advanced 서비스가 있으며 AWS Shield Standard의 경우 추가 비용 없이 모든 AWS 고객에게 자동으로 활성화됩니다.</description>
    </item>
    
    <item>
      <title>Questions</title>
      <link>http://example.org/posts/20210415-questions/</link>
      <pubDate>Thu, 15 Apr 2021 16:56:00 +0900</pubDate>
      
      <guid>http://example.org/posts/20210415-questions/</guid>
      <description>Lambda 통합을 사용하여 API Gateway REST API 구축
: Lambda 프록시 통합, Lambda 비 프록시 통합 차이?
Amazon API Gateway 요금
: 처음 3억 3천 3백만 건에서 백만 건당 3.50 USD 인데 1건은 얼마?
자습서: Lambda 비 프록시 통합을 사용하여 API Gateway REST API 빌드
: 템플릿 경로 변수란?
GameLift에서 IAM을 사용하는 방법
GameLiftGameServerGroupPolicy
https://docs.aws.amazon.com/ko_kr/lambda/latest/dg/lambda-intro-execution-role.html
aws iam create-role &amp;ndash;role-name lambda-ex &amp;ndash;assume-role-policy-document file://trust-policy.json
{ &amp;ldquo;Role&amp;rdquo;: { &amp;ldquo;Path&amp;rdquo;: &amp;ldquo;/&amp;rdquo;, &amp;ldquo;RoleName&amp;rdquo;: &amp;ldquo;lambda-ex&amp;rdquo;, &amp;ldquo;RoleId&amp;rdquo;: &amp;ldquo;AROAQFOXMPL6TZ6ITKWND&amp;rdquo;, &amp;ldquo;Arn&amp;rdquo;: &amp;ldquo;arn:aws:iam::123456789012:role/lambda-ex&amp;rdquo;, &amp;ldquo;CreateDate&amp;rdquo;: &amp;ldquo;2020-01-17T23:19:12Z&amp;rdquo;, &amp;ldquo;AssumeRolePolicyDocument&amp;rdquo;: { &amp;ldquo;Version&amp;rdquo;: &amp;ldquo;2012-10-17&amp;rdquo;, &amp;ldquo;Statement&amp;rdquo;: [ { &amp;ldquo;Effect&amp;rdquo;: &amp;ldquo;Allow&amp;rdquo;, &amp;ldquo;Principal&amp;rdquo;: { &amp;ldquo;Service&amp;rdquo;: &amp;ldquo;lambda.</description>
    </item>
    
    <item>
      <title>AWS API Gateway</title>
      <link>http://example.org/posts/20210414-api-gateway/</link>
      <pubDate>Wed, 14 Apr 2021 18:00:00 +0900</pubDate>
      
      <guid>http://example.org/posts/20210414-api-gateway/</guid>
      <description>미리 만들어 놓은 Lambda 함수와 연결합니다.
1 2 3 4 5  Links AWS API type HTTP API vs REST API
자습서: Lambda 비 프록시 통합을 사용하여 API Gateway REST API 빌드</description>
    </item>
    
    <item>
      <title>AWS Lambda in C# 구현</title>
      <link>http://example.org/posts/20210414-lambda-csharp-serialize/</link>
      <pubDate>Wed, 14 Apr 2021 09:56:00 +0900</pubDate>
      
      <guid>http://example.org/posts/20210414-lambda-csharp-serialize/</guid>
      <description>AWS Toolkit for Visual Studio에는 Visual Studio용 AWS Lambda .NET Core 프로젝트 템플릿이 포함되어 있습니다. .NET Core CLI(명령줄 인터페이스)를 사용하여 Visual Studio에 내장된 Lambda 함수를 배포할 수 있습니다.
Visual Studio의 확장 관리로 갑시다.
 Links ▶ AWS Lambda 함수로 .NET 애플리케이션 개발하기
▶ AWS Toolkit for Visual Studio
▶ .NET Core에서 AWS Lambda Layer 기능 활용하기 ▶ VPC에서 리소스에 액세스하도록 Lambda 함수 구성
▶ HttpWebRequest 활용
▶ Custom Serializer Settings</description>
    </item>
    
    <item>
      <title>AWS CDK VPC</title>
      <link>http://example.org/posts/20210409-cdk-deepdive-vpc/</link>
      <pubDate>Fri, 09 Apr 2021 10:21:00 +0900</pubDate>
      
      <guid>http://example.org/posts/20210409-cdk-deepdive-vpc/</guid>
      <description>VPC 생성하기 var vpc = new Vpc(this, &amp;#34;test-vpc&amp;#34;, new VpcProps { Cidr = &amp;#34;10.100.0.0/16&amp;#34;, MaxAzs = 2, }); 생성된 리소스 List VPC : 10.100.0.0/16
Subnet :
PublicSubnet1 : 10.100.0.0/18
PrivateSubnet2 : 10.100.64.0/18
PublicSubnet1 : 10.100.128.0/18
PrivateSubnet2 : 10.100.192.0/18
Internet gateways 1개 생성됨
NAT Gateways 2개 생성됨
Security Groups 생성됨
Route Tables 4개 생성됨
Network ACLs 1개 생성됨
Elastic IPs 2개 생성됨
A default VPC configuration will create public and private subnets.</description>
    </item>
    
    <item>
      <title>AWS Lambda with Visual Studio and C#</title>
      <link>http://example.org/posts/20210409-lambda-in-csharp/</link>
      <pubDate>Fri, 09 Apr 2021 10:21:00 +0900</pubDate>
      
      <guid>http://example.org/posts/20210409-lambda-in-csharp/</guid>
      <description>AWS Toolkit for Visual Studio에는 Visual Studio용 AWS Lambda .NET Core 프로젝트 템플릿이 포함되어 있습니다. .NET Core CLI(명령줄 인터페이스)를 사용하여 Visual Studio에 내장된 Lambda 함수를 배포할 수 있습니다.
Visual Studio의 확장 관리로 갑시다.
Lambda로 검색 해서 &amp;ldquo;AWS Toolkit for Visual Studio 2017 and 2019&amp;quot;를 다운로드 받습니다. 다운로드 중이네요.
Modify Go Go. 열려 있는 Visual Studio 창들을 모두 닫습니다. 오오. 완료 되었습니다.
Visual Studio를 열면 AWS Getting Started 창이 열리고 Access Key, Secret Key를 넣고 Save and Close를 하니 !</description>
    </item>
    
    <item>
      <title>AWS Price</title>
      <link>http://example.org/posts/20210409-aws-price/</link>
      <pubDate>Fri, 09 Apr 2021 10:09:00 +0900</pubDate>
      
      <guid>http://example.org/posts/20210409-aws-price/</guid>
      <description>VPC 생성 : VPC 자체를 생성 및 사용하는 데에는 별도의 비용이 없습니다.
VPN과 연결 : VPN 연결 시간(VPN 연결이 &amp;ldquo;사용 가능&amp;rdquo; 상태인 시간)당 요금
VPN 연결을 통해 전송된 데이터는 표준 AWS 데이터 전송 요금이 청구됩니다.
 Amazon API Gateway Amazon API Gateway를 사용하면 API를 사용할 때만 비용을 지불하면 됩니다. 최소 요금이나 사전 약정은 없습니다. HTTP API와 REST API의 경우 수신한 API 호출과 전송한 데이터 양에 대해서만 요금을 지불하면 됩니다. 프라이빗 API에 대한 데이터 전송 요금은 없습니다.</description>
    </item>
    
    <item>
      <title>CDK in C# </title>
      <link>http://example.org/posts/20210402-cdk/</link>
      <pubDate>Fri, 02 Apr 2021 17:45:00 +0900</pubDate>
      
      <guid>http://example.org/posts/20210402-cdk/</guid>
      <description>환경 Windows / Visual Studio 2019 / C#
&amp;ldquo;백문이 불여일견이요, 백견이 불여일각이며, 백각이 불여일행.&amp;rdquo;
 mkdir HelloServerlessCDK cd HelloServerlessCDK cdk init app --language csharp (디렉토리가 비어 있어야 한다) [project]\src 에서 *.sln 열기 Ctrl + F5, 성공하면 출력이 없어야 한다. Ctrl + `, 터미널을 연다, 개발자 명령 프롬프트 (개발자 PowerShell 말고) cd .. NuGet에서 기본 설치되어 있는 Amazon.CDK를 업그레이드 하거나 삭제 후 최신버전 설치 NuGet에서 Amazone.CDK.AWS.S3 설치 Infra 코딩 (테스트 코드에 BucketName 수정) 자동으로 생성된 Stack 클래스의 생성자 함수 내부에 인프라 코드 입력  var bucket = new Bucket(this, &amp;#34;MyBucket&amp;#34;, new BucketProps { Versioned = false, BucketName = &amp;#34;test-bucket&amp;#34; }); cdk bootstrap (Project root) cdk synth or Ctrl + F5 cdk deploy cdk destroy  Links ▶ Working with the AWS CDK in C#</description>
    </item>
    
    <item>
      <title>AWS Storage, DB 요금</title>
      <link>http://example.org/posts/20210402-aws-storage-pricing/</link>
      <pubDate>Fri, 02 Apr 2021 15:31:00 +0900</pubDate>
      
      <guid>http://example.org/posts/20210402-aws-storage-pricing/</guid>
      <description>주요 서비스의 기본 요금만 비교해 보자.
Amazon S3 요금
S3 Standard, GB당 0.025 USD (월) ▶ 상세
Amazon Aurora
GB당 0.12 USD (월) ▶ 상세
Amazon EBS 볼륨
범용 SSD(gp3), GB당 0.0912 USD (월) ▶ 상세
Amazon EFS
Standard 스토리지, GB당 0.33 USD (월) ▶ 상세
로그를 저장 한다면 S3가 저렴하다. 그리고 이제 S3에서도 데이터를 쿼리하고 분석할 수 있는 기반이 많이 있다.</description>
    </item>
    
    <item>
      <title>OKR</title>
      <link>http://example.org/posts/20210402-okr/</link>
      <pubDate>Fri, 02 Apr 2021 10:00:00 +0900</pubDate>
      
      <guid>http://example.org/posts/20210402-okr/</guid>
      <description>회사에서 작성하고 평가하고 있는 OKR에 대해서 알아보자.
OKR의 구조  Objective(목표), Key Results(핵심 성과)
Objective: 말 그대로, 최종적으로 이루고자 하는 목표이다.
Key Results: 목표 달성 여부를 가리기 위한 잣대로, 계량적이고 구체적인 성과들로 표현한다.
실제 업무에 사용하기 용이, 평가를 빠르고 객관적으로 할 수 있다.
OKR을 핵심 업무가 무엇인지 재고하고 집중할 수 있도록 도와준다.
고객을 Supporting하는 조직에서 OKR 작성 고민  OKR의 목적은 무엇인지?
OKR 설정은 어떻게 하는 것인지?
공동의 목표를 달성하기 위해서 할 수 있는 것은?</description>
    </item>
    
    <item>
      <title>GameLift Fleet 인스턴스 원격 접속</title>
      <link>http://example.org/posts/20210401-gamelift-remote/</link>
      <pubDate>Thu, 01 Apr 2021 14:38:00 +0900</pubDate>
      
      <guid>http://example.org/posts/20210401-gamelift-remote/</guid>
      <description>연결할 인스턴스 ID 찾기 aws gamelift describe-instances --fleet-id FLEET-ID
인스턴스에 대한 액세스 자격 증명을 요청 aws gamelift get-instance-access --fleet-id FLEET-ID --instance-id INSTANCE-ID
원격 연결을 위한 포트 열기 aws gamelift update-fleet-port-settings --fleet-id FLEET-ID --inbound-permission-authorizations &amp;ldquo;FromPort=3389,ToPort=3389,IpRange=LOCAL-PUBLIC-IP/32,Protocol=TCP&amp;rdquo;
Links ▶ 원격으로 GameLift 플릿 인스턴스에 액세스</description>
    </item>
    
    <item>
      <title>CF &#43; S3 &#43; ACM &#43; Route53</title>
      <link>http://example.org/posts/20210330-cloudfront-acm-route53/</link>
      <pubDate>Tue, 30 Mar 2021 11:27:00 +0900</pubDate>
      
      <guid>http://example.org/posts/20210330-cloudfront-acm-route53/</guid>
      <description>인증서 버지니아 리전에서.
DNS example.com과 같은 도메인 이름을 192.0.2.1과 같은 숫자 IP 주소로 변환하여 컴퓨터가 서로 통신할 수 있도록 합니다.
DNS 서비스 유형 신뢰할 수 있는 DNS
재귀적 DNS
Records
Records Type A record : DNS의 레코드 타입중에 A record type이란 간단하게 도메인(domain) name에 IP Address를 매핑하는 방법이다.
CNAME : Canonical Name의 줄임말로 하나의 도메인에 도메인 별칭을 부여하는 방식이다. 즉, 도메인의 또 다른 도메인 이름으로 생각하면 좋을 것 같다.
네임서버 : 도메인 이름과 IP의 상호변환을 가능하게 해주는 서버입니다.</description>
    </item>
    
    <item>
      <title>Auto Scaling</title>
      <link>http://example.org/posts/20210329-auto-scaling/</link>
      <pubDate>Mon, 29 Mar 2021 23:44:00 +0900</pubDate>
      
      <guid>http://example.org/posts/20210329-auto-scaling/</guid>
      <description>Auto Scaling은 익히들 알고 있을 것이다.
실제 테스트 해보면서 개념들을 적용해 볼 수 있도록 하자.
Launch Configurations 설정 필요한 것
(필수)
AMI
인스턴스 타입
보안 그룹 EBS 볼륨
키 페어
(선택) Request Spot Instances
IAM instance profile
Enable EC2 instance detailed monitoring within CloudWatch
Launch as EBS-optimized instance Advanced details
User data
Auto Scaling Groups 해보기  AMI 생성 Launch Configurations 생성 Auto Scaling Groups 생성  </description>
    </item>
    
    <item>
      <title>Right Sizing</title>
      <link>http://example.org/posts/20210329-right-sizing/</link>
      <pubDate>Mon, 29 Mar 2021 21:36:00 +0900</pubDate>
      
      <guid>http://example.org/posts/20210329-right-sizing/</guid>
      <description>AWS 리소스의 Right Sizing을 위해서는 인스턴스의 코어 수, 메모리, 네트워크 성능 등, 인스턴스 스펙을 확인해야 한다.
인스턴스의 스펙이 확인 되었다면 실제 사용하고 있는 Active 인스턴스들의 Metric들을 확인 해야 한다.
현재 인스턴스의 스펙과 Metric에 나타난 데이터를 확인하여 인스턴스 타입과 Size 변경의 필요한지 분석해야 한다.
Metric의 경우 표준 지표와 커스텀 지표가 있다.
그리고 지표에 따라 적절한 통계 값을 확인 해야 한다.
    통계 설명     Minimum 특정 기간 동안에서의 측정된 가장 낮은 값.</description>
    </item>
    
    <item>
      <title>블로그 시작</title>
      <link>http://example.org/posts/20210321-start/</link>
      <pubDate>Sun, 21 Mar 2021 22:51:37 +0900</pubDate>
      
      <guid>http://example.org/posts/20210321-start/</guid>
      <description>적지 않은 시간을 개발자로 일해왔다.
프로젝트에 집중했지만, 기술에 대해 기록하고 정리하는 시간을 가지지 않았다.
정리에 자신 있는 편은 아니지만 정리하지 않으면 경험했던 기술이 내 것으로 되지 않는 것 같다.
기록하고 기술을 내 것으로 만들자.</description>
    </item>
    
  </channel>
</rss>
